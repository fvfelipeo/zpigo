package router

import (
	"fmt"
	"time"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "zpigo/docs" // docs is generated by Swag CLI, you have to import it.
	"zpigo/internal/api/handlers"
	"zpigo/internal/api/middleware"
	"zpigo/internal/meow"
	"zpigo/internal/store"
)

func NewRouter(store *store.Store) *gin.Engine {
	gin.SetMode(gin.ReleaseMode)

	r := gin.New()

	mw := middleware.New()

	r.Use(mw.RequestID())
	r.Use(mw.Logger())
	r.Use(mw.Recovery())
	r.Use(mw.Timeout(60 * time.Second))
	r.Use(mw.CORS())
	r.Use(mw.Security())

	// Obter repositórios do store
	sessionRepo := store.GetSessionRepository()

	sessionManager := meow.NewSessionManager(
		store.GetContainer(),
		store.GetDB(),
		sessionRepo,
	)

	go func() {
		if err := sessionManager.ConnectOnStartup(); err != nil {
			fmt.Printf("Erro ao reconectar sessões na inicialização: %v\n", err)
		}
	}()

	sessionHandler := handlers.NewSessionHandlerWithManager(sessionRepo, sessionManager)
	messageHandler := handlers.NewMessageHandlerWithManager(sessionRepo, sessionManager)
	authManager := meow.NewAuthManager(store.GetDB(), sessionRepo)

	r.GET("/health", func(c *gin.Context) {
		handlers.HealthCheck(c)
	})

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	sessions := r.Group("/sessions")
	{
		sessions.POST("/add", func(c *gin.Context) {
			sessionHandler.AddSession(c)
		})
		sessions.GET("/list", func(c *gin.Context) {
			sessionHandler.ListSessions(c)
		})

		sessionGroup := sessions.Group("/:sessionID")
		sessionGroup.Use(middleware.OptionalAuthMiddleware(authManager))
		{
			sessionGroup.GET("/info", func(c *gin.Context) {
				sessionHandler.GetSessionInfo(c)
			})
			sessionGroup.GET("/status", func(c *gin.Context) {
				sessionHandler.GetSessionStatus(c)
			})
			sessionGroup.DELETE("/", func(c *gin.Context) {
				sessionHandler.DeleteSession(c)
			})
			sessionGroup.POST("/connect", func(c *gin.Context) {
				sessionHandler.ConnectSession(c)
			})
			sessionGroup.POST("/logout", func(c *gin.Context) {
				sessionHandler.LogoutSession(c)
			})
			sessionGroup.GET("/qr", func(c *gin.Context) {
				sessionHandler.GetQRCode(c)
			})
			sessionGroup.POST("/pairphone", func(c *gin.Context) {
				sessionHandler.PairPhone(c)
			})

			proxyGroup := sessionGroup.Group("/proxy")
			{
				proxyGroup.POST("/set", func(c *gin.Context) {
					sessionHandler.SetProxy(c)
				})
			}

			messageGroup := sessionGroup.Group("/message")
			{
				messageGroup.POST("/send/text", func(c *gin.Context) {
					messageHandler.SendTextMessage(c)
				})
				messageGroup.POST("/send/media", func(c *gin.Context) {
					messageHandler.SendMedia(c)
				})
			}
		}
	}

	return r
}
