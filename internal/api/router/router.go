package router

import (
	"time"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"go.mau.fi/whatsmeow/store/sqlstore"

	_ "zpigo/docs" // docs is generated by Swag CLI, you have to import it.
	"zpigo/internal/api/handlers"
	"zpigo/internal/api/middleware"
	"zpigo/internal/meow"
	"zpigo/internal/repository"
)

func NewRouter(repos *repository.Repositories, container *sqlstore.Container) *gin.Engine {
	gin.SetMode(gin.ReleaseMode)

	r := gin.New()

	mw := middleware.New()

	r.Use(mw.RequestID())
	r.Use(mw.Logger())
	r.Use(mw.Recovery())
	r.Use(mw.Timeout(60 * time.Second))
	r.Use(mw.CORS())
	r.Use(mw.Security())

	sessionHandler := handlers.NewSessionHandler(repos.Session, container, repos.GetDB())
	authManager := meow.NewAuthManager(repos.GetDB(), repos.Session)

	r.GET("/health", func(c *gin.Context) {
		handlers.HealthCheck(c)
	})

	// Swagger documentation
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	sessions := r.Group("/sessions")
	{
		sessions.POST("/add", func(c *gin.Context) {
			sessionHandler.AddSession(c)
		})
		sessions.GET("/list", func(c *gin.Context) {
			sessionHandler.ListSessions(c)
		})

		sessionGroup := sessions.Group("/:sessionID")
		sessionGroup.Use(middleware.OptionalAuthMiddleware(authManager))
		{
			sessionGroup.GET("/info", func(c *gin.Context) {
				sessionHandler.GetSessionInfo(c)
			})
			sessionGroup.GET("/status", func(c *gin.Context) {
				sessionHandler.GetSessionStatus(c)
			})
			sessionGroup.DELETE("/", func(c *gin.Context) {
				sessionHandler.DeleteSession(c)
			})
			sessionGroup.POST("/connect", func(c *gin.Context) {
				sessionHandler.ConnectSession(c)
			})
			sessionGroup.POST("/logout", func(c *gin.Context) {
				sessionHandler.LogoutSession(c)
			})
			sessionGroup.GET("/qr", func(c *gin.Context) {
				sessionHandler.GetQRCode(c)
			})
			sessionGroup.POST("/pairphone", func(c *gin.Context) {
				sessionHandler.PairPhone(c)
			})

			proxyGroup := sessionGroup.Group("/proxy")
			{
				proxyGroup.POST("/set", func(c *gin.Context) {
					sessionHandler.SetProxy(c)
				})
			}
		}
	}

	return r
}
